{
    "root": true,
    "ignorePatterns": ["projects/**/*"],
    "overrides": [
        /**
         * -----------------------------------------------------
         * TYPESCRIPT FILES (COMPONENTS, SERVICES ETC) (.ts)
         * -----------------------------------------------------
         */
        {
            "files": ["*.ts"],
            "parserOptions": {
                "project": ["tsconfig.json"],
                "createDefaultProgram": true
            },
            "extends": [
                "eslint:recommended",
                "plugin:@typescript-eslint/recommended",
                "plugin:@typescript-eslint/recommended-requiring-type-checking",
                "plugin:@angular-eslint/recommended",
                "plugin:@angular-eslint/template/process-inline-templates",
                "plugin:prettier/recommended"
            ],
            "rules": {
                /**
                 * Any TypeScript source code (NOT TEMPLATE) related rules you wish to use/reconfigure over and above the
                 * recommended set provided by the @angular-eslint project would go here.
                 */
                "@angular-eslint/directive-selector": [
                    "error",
                    {
                        "type": "attribute",
                        "prefix": "app",
                        "style": "camelCase"
                    }
                ],
                "@angular-eslint/component-selector": [
                    "error",
                    {
                        "type": "element",
                        "prefix": "app",
                        "style": "kebab-case"
                    }
                ],
                "@typescript-eslint/unbound-method": [
                    "error",
                    {
                        "ignoreStatic": true
                    }
                ],
                "@typescript-eslint/array-type": [
                    "error",
                    {
                        "default": "generic"
                    }
                ],
                "@typescript-eslint/naming-convention": [
                    "error",
                    { "selector": "variableLike", "format": ["camelCase"] },
                    {
                        "selector": "memberLike",
                        "modifiers": ["private"],
                        "format": ["strictCamelCase"],
                        "leadingUnderscore": "require"
                    },
                    {
                        "selector": ["classProperty"],
                        "types": ["boolean"],
                        "modifiers": ["public"],
                        "format": ["PascalCase"],
                        "prefix": ["is", "should", "has", "can", "did", "will"]
                    },
                    {
                        "selector": "variable",
                        "modifiers": ["const"],
                        "format": ["camelCase", "UPPER_CASE"]
                    },
                    {
                        "selector": "interface",
                        "format": ["PascalCase"],
                        "custom": {
                            "regex": "^I[A-Z]",
                            "match": false
                        }
                    }
                ],
                "prettier/prettier": [
                    "error",
                    {
                        "endOfLine": "auto"
                    }
                ],
                "@typescript-eslint/no-for-in-array": "error",
                "@typescript-eslint/explicit-function-return-type": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-useless-constructor": "warn",
                "@typescript-eslint/no-shadow": "warn",
                "@typescript-eslint/no-explicit-any": "warn",
                "@typescript-eslint/no-unused-vars": "off",
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/no-empty-interface": "error",
                "@typescript-eslint/no-unnecessary-condition": "warn",
                "@typescript-eslint/adjacent-overload-signatures": "error",
                "@typescript-eslint/no-unsafe-argument": "off",
                "@typescript-eslint/no-floating-promises": "off",
                "no-useless-escape": "off",
                "endOfLine": "off",
                "indent": "off"
            }
        },
        /**
         * -----------------------------------------------------
         * COMPONENT TEMPLATES
         * -----------------------------------------------------
         */
        {
            "files": ["*.html"],
            "extends": ["plugin:@angular-eslint/template/recommended"],
            "rules": {
                /**
                 * Any template/HTML related rules you wish to use/reconfigure over and above the
                 * recommended set provided by the @angular-eslint project would go here.
                 */
            }
        }
    ]
}
